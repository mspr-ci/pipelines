image:
  name: node:alpine
  entrypoint: [""]

stages:
  - prepare
  - test
  - quality
  - version
  - build
  - deploy
  - publish

cache: &global_cache
  policy: pull
  paths:
    - node_modules/

.prepare_git: &prepare_git
  before_script:
    - apk add git openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$GIT_SSH" > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - git remote set-url origin $GIT_URL
    - git config --global user.name "$GITLAB_USER_NAME"
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa" git pull
  after_script:
    - GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa" git push --tags origin HEAD:$CI_COMMIT_REF_NAME

variables:
  VERSION_MESSAGE: "chore(package): update version to %s"

check packages:
  stage: prepare
  script:
    - npm install --cache .npm --prefer-offline
  except:
    changes:
      - package-lock.json
  cache:
    <<: *global_cache
    policy: pull-push
    paths:
      - .npm/
      - node_modules/

install packages:
  stage: prepare
  script:
    - npm ci --cache .npm --prefer-offline
  only:
    changes:
      - package-lock.json
  cache:
    <<: *global_cache
    policy: push
    paths:
      - .npm/
      - node_modules/


run tests:
  stage: test
  script:
    - npm run test
  artifacts:
    paths:
      - build/test-results/

run sonar:
  stage: quality
  image: adoptopenjdk/openjdk11:alpine-jre
  before_script:
    - apk add nodejs npm
  script:
    - npm run sonarqube
  variables:
    SONARQUBE_URL: $SONAR_HOST_URL
    SONARQUBE_TOKEN: $SONAR_LOGIN
    SONARQUBE_ORGANIZATION: $SONAR_ORGANIZATION
    SONARQUBE_PROJECTKEY: $SONAR_PROJECTKEY

next major:
  stage: version
  <<: *prepare_git
  script:
    - npm version major -m "$VERSION_MESSAGE"
  when: manual
  only:
    - master

next minor:
  stage: version
  <<: *prepare_git
  script:
    - npm version minor -m "$VERSION_MESSAGE"
  only:
    - master

next patch:
  stage: version
  <<: *prepare_git
  script:
    - npm version patch -m "$VERSION_MESSAGE"
  only:
    - develop

build package:
  stage: build
  script:
    - npm run build
  cache:
    <<: *global_cache
  artifacts:
    paths:
      - build/resources/main/static/

generate changelog:
  stage: build
  <<: *prepare_git
  script:
    - npm run changelog
  after_script:
    - "git commit -m 'chore(changelog): update changelog'"

deploy production:
  stage: deploy
  script:
    - npm i -g netlify-cli
    - netlify deploy --site $NETLIFY_SITE_ID --auth $NETLIFY_AUTH_TOKEN --dir build/resources/main/static --prod
  only:
    - master

deploy staging:
  stage: deploy
  image: ruby:latest
  script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
    - dpl --provider=heroku --app=$HEROKU_APP_STAGING --api-key=$HEROKU_API_KEY
  only:
    - staging

deploy branch:
  stage: deploy
  script:
    - echo 1

publish image:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - PACKAGE_VERSION=$(cat package.json | grep version | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,\",]//g' | tr -d '[[:space:]]')
    - echo "{\"auths\":{\"$DOCKER_REGISTRY\":{\"username\":\"$DOCKER_USER\",\"password\":\"$DOCKER_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/Dockerfile --destination $DOCKER_REGISTRY/$DOCKER_IMAGE:$PACKAGE_VERSION --destination $DOCKER_REGISTRY/$DOCKER_IMAGE:latest

publish package:
  stage: publish
  script:
    - echo '//${NPM_REGISTRY}:_authToken=${NPM_TOKEN}'>~/.npmrc
    - npm publish

cleanup_build_job:
  stage: publish
  before_script:
    - LATEST_TAG=$(git describe --abbrev=0)
    - LATEST_VERSION_COMMIT=$(git log -n 1 --pretty=format:%h -- package.json)
  script:
    - git tag -d $LATEST_TAG
    - git revert $LATEST_VERSION_COMMIT
  <<: *prepare_git
  when: on_failure