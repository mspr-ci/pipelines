image: node:latest

services:
  - postgres:12.2-alpine

# first, install Cypress, then run all tests (in parallel)
stages:
  - prepare
  - build
  - deploy
  - test


# to cache both npm modules and Cypress binary we use environment variables
# to point at the folders we can list as paths in "cache" job settings
variables:
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/Cypress"
  POSTGRES_DB: mspr_ci
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: "postgres"
  POSTGRES_HOST_AUTH_METHOD: trust
  JDBC_DATABASE_URL: mspr_ci
  JDBC_DATABASE_USERNAME: postgres
  JDBC_DATABASE_PASSWORD: "postgres"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .npm
    - cache/Cypress
    - node_modules

cypress:
  image: cypress/base:10
  stage: build
  script:
    - npm ci
    - npx cypress cache path
    - npx cypress cache list

build api:
  image: gradle:jdk11
  stage: build
  script:
    - git clone https://github.com/mspr-ci/API.git
    - cd ./API
    - gradle -Pprod clean bootJar

build ihm:
  stage: build
  script:
    - git clone https://github.com/mspr-ci/IHM.git
    - cd ./IHM
    - npm install
    - npm run build

  artifacts:
    paths:
      - build/resources/main/static/

docker run api:
  stage: deploy
  image: docker:latest
  script: docker build -f ./API/docker/Dockerfile .

docker run ihm: 
  stage: deploy
  image: docker:latest
  script: docker build -f ./IHM/docker/Dockerfile .