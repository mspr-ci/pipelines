image: node:latest

services:
  - postgres:12.2-alpine

# first, install Cypress, then run all tests (in parallel)
stages:
  - prepare
  - build
  - deploy
  - test


# to cache both npm modules and Cypress binary we use environment variables
# to point at the folders we can list as paths in "cache" job settings
variables:
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/Cypress"
  POSTGRES_DB: mspr_ci
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: "postgres"
  POSTGRES_HOST_AUTH_METHOD: trust
  JDBC_DATABASE_URL: mspr_ci
  JDBC_DATABASE_USERNAME: postgres
  JDBC_DATABASE_PASSWORD: "postgres"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .npm
    - cache/Cypress
    - node_modules

prepare:
  stage: prepare
  script:
    - git clone https://github.com/mspr-ci/IHM.git
    - git clone https://github.com/mspr-ci/API.git
  artifacts:
    paths:
      - API/
      - IHM/


cypress:
  image: cypress/base:10
  stage: build
  script:
    - npm ci
    - npx cypress cache path
    - npx cypress cache list

build api:
  image: gradle:jdk11
  stage: build
  script:
    - cd ./API
    - ./gradlew -Pprod clean bootJar
  artifacts:
    paths:
      - API/build/libs/*.jar

build ihm:
  stage: build
  script:
    - cd ./IHM
    - npm install
    - npm run build
  artifacts:
    paths:
      - IHM/


docker run:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  script: 
    - docker build  -f ./API/docker/Dockerfile --tag api:1.0 .
    - docker run api:1.0

# docker run ihm: 
#   stage: deploy
#   image: docker:latest
#   services:
#     - docker:dind
#   script: 
#   - ls
#   - docker build -t ./IHM/docker/Dockerfile .